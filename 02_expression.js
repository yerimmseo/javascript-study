// 모든 값은 데이터 타입을 가지며, 메모리에 2진수, 비트의 나열로 저장된다.
var sum = 10 + 20; // 변수에는 10 + 20이 평가되어 생성된 숫자 값 30이 할당된다.

// 리터럴(literal): 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법
// 아라비아 숫자, 알파벳, 한글 등 미리 약속된 기호('', "", [], {}, // 등)으로 표기한 코드.

// 표현식은 값으로도 평가될 수 있는 문이다. 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조한다.
var score = 100; // 100은 리터럴
 
var score = 50 + 50; // 50 + 50은 리터럴과 연산자

score; // 100

// 값으로 평가될 수 있는 문은 모두 표현식이다.
// 리터럴 표현식
10
'Hello'

// 식별자 표현식 (선언이 이미 존재한다고 가정)
sum
person.name
arr[1]

// 연산자 표현식
10 + 20
sum = 10
sum !== 10

// 함수/메서드 호출 표현식 (선언이 이미 존재한다고 가정)
square()
person.square()


var x = 1 + 2;
// 식별자 표현식 x는 3으로 평가된다.
x + 3; // -> 6


// 문은 프로그램을 구성하는 기본 단위이자 최소 실행 단위다.
// 문은 여러 토큰으로 구성된다. 토큰이란 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소를 의미한다.
var sum = 1 + 2; // 문
// var, sum, =, 1, +, 2, ; -> 토큰

// 변수 선언문
var x;

// 할당문
x = 5;

// 함수 선언문
function foo() {}

// 조건문
if (x > 1) { console.log(x); }

// 반복문
for (var i = 0; i < 2; i++) { console.log(i); }


// 세미콜론(;)은 문의 종료를 나타낸다. 단, 0개 이상의 문을 중괄호로 묶은 코드 블록({...}) 뒤에는 세미콜론을 붙이지 않는다.
// if문, for문, 함수 등의 코드 블록 뒤에는 세미콜론을 붙이지 않는다. 이러한 코드 블록은 언제나 문의 종료를 의미하는 자체 종결성을 갖기 때문이다.
// 자바스크립트엔진이 세미콜론 자동 삽입기능(ASI)이 암묵적으로 수행되기 때문에 생략 가능.
function foo() {
    return 
        {}
    // ASI의 동작 결과 => result; {};
    // 개발자의 예측 => return {};
}

console.log(foo()); // undefined

var bar = function() {}
(function() {})();
// ASI의 동작 결과 => var bar = function () {}(function() {})();
// 개발자의 예측 => var bar = function () {}; (function() {})();
// TypeError: (intermediate value)(...) is not a function


// 변수 선언문은 값으로 평가될 수 없으므로 표현식이 아니다.
var x;
// 1, 2, 1 + 2, x = 1 + 2는 모두 표현식이다.
// x = 1 + 2는 표현식이면서 완전한 문이기도 하다.
x = 1 + 2;

// 변수 선언문은 표현식이 아닌 문이다.
var x;

// 할당문은 그 자체가 표현식이지만 완전한 문이기도 하다. 즉, 할당문은 표현식인 문이다.
x = 100;

// 표현식이 아닌 문은 값처럼 사용할 수 없다.
//var foo = var x; // SyntaxError: Unexpected token var

// 표현식인 문은 값처럼 사용할 수 있다.
var foo = x = 100;
console.log(foo); // 100